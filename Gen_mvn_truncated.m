function X=Gen_mvn_truncated(dimX,X,Mu,Sigma,LL,UL)%--------------------------% function name: Gen_mvn_truncated%% Generates a random vector X from a truncated multivariate normal% distribution.%% Written by Eun Sug Park and Man-Suk Oh, December 2011% Last updated February 2021%----------------------------------------Siginv=inv(Sigma);for i=1:dimX    condvari=1/Siginv(i,i);    s=0;    for j=1:dimX        if  j ~= i            s=s+Siginv(i,j)*(X(j)-Mu(j));        end    end    condmu=Mu(i)-s*condvari;    condsd=sqrt(condvari);        %Generation of univariate normal r.v. with restriction (lower,upper):    %Generate univariate normal random number 'z' with mean 'condmu' and    %standard deviation 'condsd', truncated to (LL(i), UL(i))        %temp1=normcdf((UL(i)-condmu)/condsd);    %temp2=normcdf((LL(i)-condmu)/condsd);    z1=(UL(i)-condmu)/condsd;    z2=(LL(i)-condmu)/condsd;    temp1=0.5 * erfc(-z1 ./ sqrt(2)); %normcdf(z1)    temp2=0.5 * erfc(-z2 ./ sqrt(2)); %normcdf(z2)        if temp1-temp2>=10^(-3)        %Use cdf inverse method        u=rand;        zz=u*temp1+(1-u)*temp2;        z=norminv(zz)*condsd+condmu;      else        %Accep-Reject if cdf inverse is infeasible (i.e., when P(LL(i), UL(i))        %is too small)        if LL(i)<=condmu & UL(i)>=condmu            %Accept-Reject using the Univorm density            u=rand;  %Generate uniform random number            z=u*(UL(i)-LL(i))+LL(i);            fz=exp(-0.5*(z-condmu)^2/condvari);            v=rand; %Generate uniform random number            while v>fz                u=rand;                z=u*(UL(i)-LL(i))+LL(i);                fz=exp(-0.5*(z-condmu)^2/condvari);                v=rand; %Generate uniform random number            end        elseif LL(i) > condmu            a=LL(i);            b=UL(i);            % A-R using the distribution function of Exp((condmu-a)/condvari)I(X>a)            u=rand; %Generate uniform random number            rate=(a-condmu)/condvari;            fb=1-exp(-rate*(b-a));            z=-1/rate*log(1-fb*(1-u))+a;            v=rand; %Generate uniform random number            while z>sqrt(-2*condvari*log(v))+a                u=rand;                rate=(a-condmu)/condvari;                fb=1-exp(-rate*(b-a));                z=-1/rate*log(1-fb*(1-u))+a;                v=rand; %Generate uniform random number            end        elseif UL(i) < condmu            a=2*condmu-UL(i);            b=2*condmu-LL(i);            u=rand; %Generate uniform random number            rate=(a-condmu)/condvari;            fb=1-exp(-rate*(b-a));            z=-1/rate*log(1-fb*(1-u))+a;            v=rand; %Generate uniform random number            while z>sqrt(-2*condvari*log(v))+a                u=rand; %Generate uniform random number                rate=(a-condmu)/condvari;                fb=1-exp(-rate*(b-a));                z=-1/rate*log(1-fb*(1-u))+a;                v=rand; %Generate uniform random number            end            z=2*condmu-z;        end    end    X(i)=z;end